name: TestCPP CMake Code Coverage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Debug]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DTESTCPP_STACKTRACE_ENABLED=1
        -DTESTCPP_TEST_ENABLED=1
        -DTESTCPP_COVERAGE_ENABLED=1
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --progress --verbose

    - name: Coverage
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute gcov to generate a coverage report
      run: |
        find . -name '*.gcda'
        mkdir -p coverage
        cd coverage
        find .. -name '*.gcda' | xargs gcov -abcfmu
        find . -type f -not -name 'Test*.gcov' | xargs rm

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5.3.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: eljonny/TestCPP
